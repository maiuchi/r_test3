[
["index.html", "Rock Your Resume with R Welcome!", " Rock Your Resume with R Mai Uchida 2020-06-09 Welcome! "],
["why-learn-r.html", "Chapter 1 Why learn R? Pros and Cons of R Learning a programing language is an investment, choose wisely", " Chapter 1 Why learn R? Pros and Cons of R Pros R is a language made by statisticians Lots of packages that allow you to perform statistical analysis/ modeling Large user community Free and open source Nice visualization package (ggplot) Cons R has a learning curve R is more specific to statistical analysis (e.g.) Python can do a lot more and their stats packages are getting better Learning a programing language is an investment, choose wisely Points of considerations What’s your industry’s standard? If you are going to finance, I’d learn Excel instead If a job you are applying to uses SAS, I'd learn SAS instead Do you need a programming language to perform what you need to do? If you want to a health insurance company writing policies, maybe learning a programming language will have a small investment of return Is the software/ programming language free (open source) or licensed? If licensed and your employer/ research team has no funding for it, your programing knowledge won’t be as helpful as it could be If open source, you can just download it to your computer (most of the time if no restrictions from the organizations you work for) "],
["why-visualization-matters.html", "Chapter 2 Why visualization matters?", " Chapter 2 Why visualization matters? "],
["difference-between-exploratory-and-explanatory-data-visualization.html", "Chapter 3 Difference between exploratory and explanatory data visualization", " Chapter 3 Difference between exploratory and explanatory data visualization "],
["base-r-syntax-and-data-type.html", "Chapter 4 Base R syntax and data type 4.1 Data type 4.2 Create a variable and assign a value 4.3 Create variables and calculate 4.4 Create a new variable with the sum 4.5 Use functions 4.6 Make a data frame 4.7 Create a simple plot", " Chapter 4 Base R syntax and data type 4.1 Data type Charactor vector (srting and/ or factor): defined by using &quot; &quot; (e.g.) &quot;Jack&quot;, &quot;Rose&quot; Cannot perform mathmatical calculations Numeric vector (double, integer etc...): numbers are written as is (e.g.) 100, 200 Can perfom a mathmatical calculations Logical vecor: TRUE or FALSE Let's practice! write a code 100 + 200 as a numerical vector write a code 100 + 200 as a character vector 4.2 Create a variable and assign a value if you want to make a variable x and assign 1 as a value &quot;&lt;-&quot; is the symbol we use to assign values in R &quot;#&quot; is to make comments on an R script x &lt;- 1 x #check the variable Let's practice! Create a variable pineapples and assign 120 as a value Check the variable 4.3 Create variables and calculate Create variables x and y. Assign 1 as a value for x, 4 as a value of y Add them up Check if x is bigger than y #create variables x, y and assign values x &lt;- 1 y &lt;- 4 #add x and y x + y #examine using logical operator x &gt; y Let's practice! Create a variable pineapples and assign 120 as a value. Create a variable strawberries and assign 70 as a value. Add them up using variable names Check if pineapples are larger than strawberries using a logical operator 4.4 Create a new variable with the sum Create a variable z and assign the sum of x + y x &lt;- 1 y &lt;- 4 #create a new variable z and assign the sum of x and y z &lt;- x + y #check the value of z z Let's practice! Create a variable pineapples and assign 120 as a value. Create a variable strawberries and assign 70 as a value. Create a new variable pineberries and assign the sum of pineapples and strawberries Check the value of pineberries) 4.5 Use functions Calcurate the sum of x, y and z x &lt;- 1 y &lt;- 4 z &lt;- x + y #sum up x, y and z using the sum() function sum(x, y, z) Let's practice! Create a variable pineapples and assign 120 as a value. Create a variable strawberries and assign 70 as a value. Create a new variable pineberries and assign the sum of pineapples and strawberries Sum up pinabbles, strawberries, and pineberries using the sum() function 4.6 Make a data frame Make a data frame &quot;df1&quot; (explanation 1). &quot;variable&quot; is a column name, c(&quot;&quot;, &quot;&quot;,) is to add multiple vairiables. this says assign x to the &quot;variable&quot; column, row 1. assign y to the &quot;variable&quot; column, row 2. assign z to the &quot;variable&quot; column, row 3. (explanation 2). &quot;value&quot; is a column name. this says that assign 1 to the &quot;value&quot; column, row 1. assign 4 to the &quot;value&quot; column, row 2. assign 10 to the &quot;value&quot; column, row 3. Calcurate the mean of x, y and z df1 &lt;- data.frame(&quot;variable&quot; = c(&quot;x&quot;, &quot;y&quot;, &quot;z&quot;), #(explanation 1). &quot;value&quot; = c(1, 4, 10)) #(explanation 2). str(df1) #calcurate mean mean(df1$value) #&quot;$&quot; is select &quot;value column&quot; from df1 Let's practice! Create a dataframe &quot;fruits,&quot; which contains two columns (&quot;fruitType&quot; and &quot;amount&quot;) pineapples, which the value is 120 strawberries, which the value is 70 pineberries, which the value is 190 Check the structure of the dataframe Calculate the mean of &quot;amount&quot;&quot; 4.7 Create a simple plot Create a data frame &quot;firstHalf&quot; Create a simple barplot using the &quot;barplot()&quot; function firstHalf &lt;- data.frame(&quot;month&quot; = c(&quot;Jan&quot;, &quot;Feb&quot;, &quot;Mar&quot;, &quot;Apr&quot;, &quot;May&quot;, &quot;June&quot;), &quot;value&quot; = c(150, 200, 15, 70, 300, 60)) #create a bar plot. names.arg is to label each bar barplot(fristHalf$value, names.arg = c(&quot;Jan&quot;, &quot;Feb&quot;, &quot;Mar&quot;, &quot;Apr&quot;, &quot;May&quot;, &quot;June&quot;)) Let's practice! Create a data frame &quot;secondHalf.&quot; Monthly values are as follows: July, 250 August, 10 September, 600 October, 120 November, 80 December, 50 Create a barplot using the &quot;barplot()&quot; function Make sure to label each bars "],
["practice-problem-1.html", "Chapter 5 Practice Problem 1 Let’s make Anscombe's quartet 5.1 Set up an environement and load data 5.2 Check data structure and clean data (done for today) 5.3 Check data distributions", " Chapter 5 Practice Problem 1 Let’s make Anscombe's quartet What is Anscombe's Quartet? General Steps for Data Analysis Load data (of course, you need to have your data prior to this...) Clean data Check data distributions Data frame creation (subsetting the data) Check data distribution Summary statistics Exploratory data visualization Analyze your data Create a explanatory data visualization product 5.1 Set up an environement and load data Install R and R studio There are a couple options for R's Integrated Development Environment (IDE), but I would recommend R Studio if you do not have your preferred platform yet. Create an R peoject file (optional, but recommended) name your file: myFirstR Create an R script file name your file: anscombe Check and set up your work directory work directory: a place/ folder on your computer where your file locates #check your work directory getwd() #set your work directory setwd(&quot;/YOUR FILE PATH HERE/&quot;) #mac users (if you made a folder on your desktop) setwd(&quot;/Users/your-user-name/Desktop/myFirstR&quot;) #PC users (if you made a folder on your desktop) setwd(&quot;\\\\&quot;) Install and load packages you need for the project What are packages? Difference between install and load packages Install packages: You only need to do it once when you don't have a package installed in your R Load packages: You need to load them when you re-open R or want to use a package that is not loaded yet (package is already installed) Make sure you install and load all the packages you need in the beginning of your code #install packages install.packages(&quot;ggplot2&quot;) install.packages(&quot;dyplyr&quot;) install.packages(&quot;tidyverse&quot;) install.packages(&quot;RCurl&quot;) #load packages library(ggplot2) library(dplyr) library(tidyverse) library(RCurl) #to check installed packages, run the code below or click &quot;packages&quot; on R studio ip = as.data.frame(installed.packages()[,c(1,3:4)]) ip = ip[is.na(ip$Priority),1:2,drop=FALSE]ip load a dataset (if you are running R on R studio write this code to load data) #loading data from a github repository. assign URL variable url &lt;- getURL(&quot;https://raw.githubusercontent.com/maiuchi/r_test1/master/test.csv&quot;) #name a data frame (df) anscombe and read csv anscombe &lt;- read.csv(text = url) R already has this data installed... so you can also do... data(&quot;anscombe&quot;) 5.2 Check data structure and clean data (done for today) Once you load the data up to R, the first thing you'd want to do is: Make sure your data is properly loaded function to use: View(name-of-dataframe) Check the structure of the data function to use: str(name-of-dataframe) or glimpse(name-of-dataframe) 5.3 Check data distributions "],
["temporaly-r-platform.html", "Temporaly R Platform", " Temporaly R Platform In case you had issues running code on R studio, you can use type your code below to follow the demo "]
]
